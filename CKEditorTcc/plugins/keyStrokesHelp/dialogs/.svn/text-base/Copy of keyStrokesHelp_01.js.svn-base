﻿/**
 * @license Copyright (c) 2003-2013, CKSource - Frederico Knabben. All rights reserved.
 * For licensing, see LICENSE.md or http://ckeditor.com/license
 */

 
/**
 * Pegando o nome do comando\ferramenta
 * 	listTools[j].groups[x]
 * Traduzindo o nome das ferramentas:
 * 	tools = editor.lang.toolbar; alert(tools.toolbarGroups.document);
 * Traduzindo o nome das ferramentas dinamicamente:
 * 			tools = editor.lang.toolbar;
 *			alert(tools.toolbarGroups[listTools[j].name]);
 * 
 * Lendo todos os grupos e subgrupos
 * for(var i = 0; i<toolbar.length ; i++){
	for (var j = 0 ; j < toolbar[i].items.length ; j++) {
		alert("Grupo: " + toolbar[i].name + "   Item: " + toolbar[i].items[j].name )	
	}
 * 
 * 
 */

CKEDITOR.dialog.add( 'keyStrokesHelp', function( editor ) {
	
//var toolbarPlugin = CKEDITOR.plugins.get( 'toolbar' );
//var listTools =  toolbarPlugin.getToolbarGroups(editor);
var toolbarPlugin = CKEDITOR.plugins.get( 'toolbar' );
var listTools =  toolbarPlugin.getToolbar(editor); //Listas de ferramentas, retorna objetos

alert(listTools);
	//alert(listToolas);
	
/*
for ( var i = 0; i < listTools.length; i++ ) {
	//groups = listTools[ i ];
	
	alert(listTools[ i ].name + "  =  "+listTools[i]);
}*/

	//editor.lang => Armazena funções relacionadas a linguagem
	// Exemplo: editor.lang.about.title, no arqui
	/*	CKEDITOR.plugins.setLang( 'about', 'pt-br', {
			title: 'Sobre o CKEditor',
			userGuide: 'Guia do Usuário do CKEditor'
		}); */	


	var lang = editor.lang.keyStrokesHelp,
		id = CKEDITOR.tools.getNextId();

	// CharCode <-> KeyChar.
	var keyMap = {
		8: "BACKSPACE",
		9: "TAB",
		13: "ENTE		R",
		16: "SHIFT",
		17: "CTRL",
		18: "ALT",
		19: "PAUSE",
		20: "CAPSLOCK",
		27: "ESCAPE",
		33: "PAGE UP",
		34: "PAGE DOWN",
		35: "END",
		36: "HOME",
		37: "LEFT ARROW",
		38: "UP ARROW",
		39: "RIGHT ARROW",
		40: "DOWN ARROW",
		45: "INSERT",
		46: "DELETE",
		91: "LEFT WINDOW KEY",
		92: "RIGHT WINDOW KEY",
		93: "SELECT KEY",
		96: "NUMPAD  0",
		97: "NUMPAD  1",
		98: "NUMPAD  2",
		99: "NUMPAD  3",
		100: "NUMPAD  4",
		101: "NUMPAD  5",
		102: "NUMPAD  6",
		103: "NUMPAD  7",
		104: "NUMPAD  8",
		105: "NUMPAD  9",
		106: "MULTIPLY",
		107: "ADD",
		109: "SUBTRACT",
		110: "DECIMAL POINT",
		111: "DIVIDE",
		112: "F1",
		113: "F2",
		114: "F3",
		115: "F4",
		116: "F5",
		117: "F6",
		118: "F7",
		119: "F8",
		120: "F9",
		121: "F10",
		122: "F11",
		123: "F12",
		144: "NUM LOCK",
		145: "SCROLL LOCK",
		186: "SEMI-COLON",
		187: "EQUAL SIGN",
		188: "COMMA",
		189: "DASH",
		190: "PERIOD",
		191: "FORWARD SLASH",
		192: "GRAVE ACCENT",
		219: "OPEN BRACKET",
		220: "BACK SLASH",
		221: "CLOSE BRAKET",
		222: "SINGLE QUOTE"
	};

	// Modifier keys override.
	keyMap[ CKEDITOR.ALT ] = 'ALT';
	keyMap[ CKEDITOR.SHIFT ] = 'SHIFT';
	keyMap[ CKEDITOR.CTRL ] = 'CTRL';

	// Sort in desc.
	var modifiers = [ CKEDITOR.ALT, CKEDITOR.SHIFT, CKEDITOR.CTRL ];

	function representKeyStroke( keystroke ) {
		var quotient, modifier,
			presentation = [];

		for ( var i = 0; i < modifiers.length; i++ ) {
			modifier = modifiers[ i ];
			quotient = keystroke / modifiers[ i ];
			if ( quotient > 1 && quotient <= 2 ) {
				keystroke -= modifier;
				presentation.push( keyMap[ modifier ] );
			}
		}

		presentation.push( keyMap[ keystroke ] || String.fromCharCode( keystroke ) );

		return presentation.join( '+' );
	}

	var variablesPattern = /\$\{(.*?)\}/g;

	var replaceVariables = (function() {
		// Swaps keystrokes with their commands in object literal.
		// This makes searching keystrokes by command much easier.
		var keystrokesByCode = editor.keystrokeHandler.keystrokes, //contem a lista de teclas de atlahos registradas
			keystrokesByName = {};
		//pega o nome do comando na lista de teclas de atalhos registradas em editor.keystrokeHandler.keystrokes
		for ( var i in keystrokesByCode )
			keystrokesByName[ keystrokesByCode[ i ] ] = i;
		//Aqui keystrokesByName está com os id das teclas de atalho
 		/*
		 * Função que recebe o nome do comando (bold) e retorna a correspondente tecla de atalho (CTLR+B)
		 */
		return function( match, name ) {
			// Return the keystroke representation or leave match untouched
			// if there's no keystroke for such command.
			//Exemplo: name=bold return=CTRL+B
			return keystrokesByName[ name ] ? representKeyStroke( keystrokesByName[ name ] ) : match;
		};
	})();

	/**
	 * MONTA A DIALOG
	 */
	// Create the help list directly from lang file entries.
	function buildHelpContents() {
		var pageTpl = '<div class="cke_accessibility_legend" role="document" aria-labelledby="' + id + '_arialbl" tabIndex="-1">%1</div>' +
				'<span id="' + id + '_arialbl" class="cke_voice_label">' + lang.contents + ' </span>',
			sectionTpl = '<h1>%1</h1><dl>%2</dl>',
			itemTpl = '<dt>%1</dt><dd>%2</dd>';

		var pageHtml = [],
			sections = lang.legend,	//Armazena o nome dos grupos
			sectionLength = sections.length;
/**
 * Aqui a section(grupos) e os ítems(bold..) são carregados do arquivo de edioma
 * 		name: 'Comandos ${basicstyles}',
		items: [
			{
			name: ' Comando Desfazer',
			legend: 'Pressione ${undo}'
		},

 */

	//FAZER aqui pode iterar no tamho do array que representa os grupos das ferramentas
	var toolbarPlugin = CKEDITOR.plugins.get( 'toolbar' );
	var listTools =  toolbarPlugin.getToolbar(editor); //Listas de ferramentas, retorna objetos
//	alert(toolbarPlugin.getToolbarConfig(editor));
	/**
	 * ITERA NOS GRUPOS DE FERRAMENTAS UTILIZANDO PLUGIN/TOOLBAR
	 */
	for ( var i = 0; i < listTools.length; i++ ) {
			var section = sections[ i ],
				sectionHtml = [],
				items = section.items,
				itemsLength = items.length;
				tools = editor.lang.toolbar; //lista de ferramentas do arquivo de edioma do plugin toolbar
			

			/**
			 * ITERA NOS ÍTENS DOS GRUPOS DE FERRAMENTAS
			 */
			for ( var j = 0; j < listTools[i].groups.length; j++ ) {
				var item = items[ 0 ];
					//pega os itens da section e um a um substitui ${} pela tecla de atalho correspondente (replaceVariables)
					//itemLegend = item.legend.replace( variablesPattern, replaceVariables );
					//acessa um íten do grupo
				
					//verifica se 
					//alert(item.legend+'${'+listTools[i] agora descobre os items+'}');
					//alert(listTools[j].groups[x]);
				// (#9765) If some commands haven't been replaced in the legend,
				// most likely their keystrokes are unavailable and we shouldn't include
				// them in our help list.
				//if ( itemLegend.match( variablesPattern ) )
				//	continue;
				//sectionHtml.push( itemTpl.replace( '%1', item.name ).replace( '%2', itemLegend ) );
				
				


			}
			
			
		/**
		 * Monta os grupos (sections, legend.name) 
		 */
		//for (var j = 0; j < listTools.length; j++) {
		//com  grupo em mãos, itera nos ítens tentando descobrir se possiu tecla de atalho
			//se sim adidiona em itemLegend
		


			//verifica se o valor é um '/' separador, quando for undefined não entra no if
			//
			//others e about não estão em toolbar/lang
			
/*
 * O que se tem é uma lista de todos os grupos, agora tem que remover os grupos que cujos itens não possui tecla de atalho cadastrada.
 */

			//for ( var x = 0; x < listTools[j].groups.length; x++ ) {
				//pegar a frase do arquivo de edioma concatenar com nome da ferramenta e pegar a tecla de atalho
				// em item.name pegar o nome da ferramenta
				//alert(listTools[j].groups[x]);
/*				var item = items[ j ],
					//substitui Pressione ${toolbarFocus} pla tecla de atalho
					legend = item.legend+'${'+listTools.groups[j]+}',
					itemLegend = item.legend.replace( variablesPattern, replaceVariables );
				alert(item.name);
				// (#9765) If some commands haven't been replaced in the legend,
				// most likely their keystrokes are unavailable and we shouldn't include
				// them in our help list.
				if ( itemLegend.match( variablesPattern ) )
					continue;
				/**
				 * item.name = Comando Negrito
				 * itemLegend = Pressione CTRL+B
				 */
				//sectionHtml.push( itemTpl.replace( '%1', item.name ).replace( '%2', itemLegend ) );
		//	}
		// (#9765) If some commands haven't been replaced in the legend,
		// most likely their keystrokes are unavailable and we shouldn't include
		// them in our help list.
		//if ( itemLegend.match( variablesPattern ) )
		//	continue;
		
		/**
		 * item.name = Comando Negrito
		 * itemLegend = Pressione CTRL+B
		 */
	//
	//		if(listTools[j].name != undefined) {
	//			nameTool = tools.toolbarGroups[listTools[j].name];
	//			pageHtml.push( sectionTpl.replace( '%1', nameTool ).replace( '%2', sectionHtml.join( '' ) ) );
			}
			
			//alert(listTools[j].name+'==='+tools.toolbarGroups[listTools[j].name]);
			
			/* Monta os grupos: substtui %1 por section.name
			 * Monta os ítens: substitui %2 pelos ítens
			 * listTools[j].name -> retorna o nome do grupo, tem que traduzir
			 */			

			
	//	}


	//	}

		return '';// pageTpl.replace( '%1', pageHtml.join( '' ) );
	}

	return {
		title: lang.title,
		minWidth: 600,
		minHeight: 400,
		contents: [
			{
			id: 'info',
			label: editor.lang.common.generalTab,
			expand: true,
			elements: [
				{
				type: 'html',
				id: 'legends',
				style: 'white-space:normal;',
				focus: function() { this.getElement().focus(); },
				html: buildHelpContents() + '<style type="text/css">' +
					'.cke_accessibility_legend' +
					'{' +
						'width:600px;' +
						'height:400px;' +
						'padding-right:5px;' +
						'overflow-y:auto;' +
						'overflow-x:hidden;' +
					'}' +
					// Some adjustments are to be done for IE6 and Quirks to work "properly" (#5757)
					'.cke_browser_quirks .cke_accessibility_legend,' +
					'.cke_browser_ie6 .cke_accessibility_legend' +
					'{' +
						'height:390px' +
					'}' +
					// Override non-wrapping white-space rule in reset css.
					'.cke_accessibility_legend *' +
					'{' +
						'white-space:normal;' +
					'}' +
					'.cke_accessibility_legend h1' +
					'{' +
						'font-size: 20px;' +
						'border-bottom: 1px solid #AAA;' +
						'margin: 5px 0px 15px;' +
					'}' +
					'.cke_accessibility_legend dl' +
					'{' +
						'margin-left: 5px;' +
					'}' +
					'.cke_accessibility_legend dt' +
					'{' +
						'font-size: 13px;' +
						'font-weight: bold;' +
					'}' +
					'.cke_accessibility_legend dd' +
					'{' +
						'margin:10px' +
					'}' +
					'</style>'
			}
			]
		}
		],
		buttons: [ CKEDITOR.dialog.cancelButton ]
	};
});
